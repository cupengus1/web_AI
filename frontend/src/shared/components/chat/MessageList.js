import React, { useEffect, useRef } from 'react';

// H√†m format n·ªôi dung ph·∫£n h·ªìi c·ªßa AI sang HTML ƒë∆°n gi·∫£n (heading, bold, italic, list...)
const formatAIResponse = (text) => {
  if (!text) return '';
  
  let formatted = text
  // Thay th·∫ø ### th√†nh heading
    .replace(/###\s*(.+)/g, '<h4>$1</h4>')
    // Thay th·∫ø ** bold text **
    .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
    // Thay th·∫ø * italic text * (nh∆∞ng tr√°nh conflict v·ªõi **)
    .replace(/(?<!\*)\*([^*]+?)\*(?!\*)/g, '<em>$1</em>')
    // X·ª≠ l√Ω numbered list
    .replace(/(\d+)\.\s+(.+?)(?=\n|$)/g, '<div class="list-item"><strong>$1.</strong> $2</div>')
    // X·ª≠ l√Ω bullet points
    .replace(/^-\s+(.+?)(?=\n|$)/gm, '<div class="bullet-item">‚Ä¢ $1</div>')
    // Chia ƒëo·∫°n vƒÉn d√†i th√†nh paragraphs
    .replace(/\n\n+/g, '</p><p>')
    // Thay \n ƒë∆°n th√†nh <br/>
    .replace(/\n/g, '<br/>')
    // Wrap trong paragraphs
    .replace(/^(.+)$/, '<p>$1</p>')
    // L√†m s·∫°ch c√°c k√Ω t·ª± markdown th·ª´a
    .replace(/#{3,}/g, '')
    .replace(/\*{3,}/g, '');

  return formatted;
};

// Danh s√°ch tin nh·∫Øn gi·ªØa ng∆∞·ªùi d√πng v√† AI
// Props:
// - messages: [{ id, type: 'user'|'ai', content, timestamp }]
// - isLoading: boolean ‚Äî hi·ªÉn th·ªã typing indicator khi AI ƒëang tr·∫£ l·ªùi
const MessageList = ({ messages, isLoading }) => {
  // T·ª± ƒë·ªông cu·ªôn xu·ªëng cu·ªëi khi c√≥ tin nh·∫Øn m·ªõi ho·∫∑c tr·∫°ng th√°i ƒëang g√µ thay ƒë·ªïi
  const endRef = useRef(null);
  useEffect(() => {
    endRef.current?.scrollIntoView({ behavior: 'smooth', block: 'end' });
  }, [messages, isLoading]);
  if (messages.length === 0) {
    return (
      <div className="welcome-message">
        <h2>Xin ch√†o!</h2>
        <p>T√¥i l√† kd.AI. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨!</p>
        <div className="suggestions">
          <div className="suggestion">Quy tr√¨nh l√†m vi·ªác</div>
          <div className="suggestion">Ch√≠nh s√°ch c√¥ng ty</div>
          <div className="suggestion">H∆∞·ªõng d·∫´n h·ªá th·ªëng</div>
        </div>
      </div>
    );
  }

  return (
    <div className="message-list">
  {messages.map(message => (
        <div key={message.id} className={`message ${message.type}`}>
          <div className="message-avatar">
            {message.type === 'user' ? 'üë§' : 'ü§ñ'}
          </div>
          <div className="message-content">
            <div 
              className="message-text"
              dangerouslySetInnerHTML={{
                __html: message.type === 'ai' 
                  ? formatAIResponse(message.content)
                  : message.content
              }}
            />
            <div className="message-time">
              {new Date(message.timestamp).toLocaleTimeString()}
            </div>
          </div>
        </div>
      ))}
      
  {isLoading && (
        <div className="message ai">
          <div className="message-avatar">ü§ñ</div>
          <div className="message-content">
            <div className="typing-indicator">
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
        </div>
      )}
  {/* M·ªëc cu·ªôn cu·ªëi danh s√°ch */}
  <div ref={endRef} />
    </div>
  );
};

export default MessageList;
